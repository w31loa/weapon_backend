# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Basket {
  id: Int!
  user_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  User: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Int!
  login: String!
  email: String!
  password: String!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  Basket: Basket
}

type Document {
  id: Int!
  url: String!
  name: String!
  size: Int
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
}

type ProductDocument {
  product_id: Int!
  document_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  Document: Document
  Product: Product
}

type Product {
  id: Int!
  title: String!
  description: String!
  price: Int!
  magazine: Int!
  caliber: String!
  article: String!
  barrel_length: Int!
  category_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  Category: Category
  ProductDocument: [ProductDocument!]
}

type Category {
  id: Int!
  title: String!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  Product: [Product!]
}

type FindAllProductsOutput {
  products: [Product!]
  totalCount: Int!
}

type ProductsInBasket {
  basket_id: Int!
  product_id: Int!
  value: Int!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  Basket: Basket
  Product: Product
}

type FindAllProductsInBasketOutput {
  productsInBasket: [ProductsInBasket!]
  totalCount: Int!
}

type Order {
  id: Int!
  user_id: Int!
  basket_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  deleted_at: DateTime
  User: User
  Basket: Basket
}

type Query {
  user(id: Int!): User!
  category(id: Int!): Category!
  products(skip: Int, take: Int, search: String, categoryId: Int): FindAllProductsOutput!
  product(id: Int!): Product!
  basketForUser(skip: Int, take: Int): FindAllProductsInBasketOutput!
  order(id: Int!): Order!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: Int!): Product!
  addProductToBasket(addProductToBasketInput: AddProductToBasketInput!): ProductsInBasket!
  changeProductValueInBasket(updateBasketInput: UpdateBasketInput!): ProductsInBasket!
  removeProductFromBasket(product_id: Int!): ProductsInBasket!
  clearBasket: [ProductsInBasket!]!
  createOrder: Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  removeOrder(id: Int!): Order!
}

input CreateUserInput {
  login: String!
  email: String!
  password: String!
}

input CreateCategoryInput {
  title: String!
}

input UpdateCategoryInput {
  title: String
  id: Int!
}

input CreateProductInput {
  title: String!
  description: String!
  price: Int!
  magazine: Int!
  caliber: String!
  barrel_length: Int!
  category_id: Int!
  article: String!
  document_ids: [Int!]
}

input UpdateProductInput {
  title: String
  description: String
  price: Int
  magazine: Int
  caliber: String
  barrel_length: Int
  category_id: Int
  article: String
  document_ids: [Int!]
  id: Int!
}

input AddProductToBasketInput {
  productId: Int!
}

input UpdateBasketInput {
  product_id: Int!
  value: Int!
}

input UpdateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}